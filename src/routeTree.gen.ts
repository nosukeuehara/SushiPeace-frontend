/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import type { CreateFileRoute, FileRoutesByPath } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SushiIndexRouteImport } from './routes/sushi/index'
import { Route as SushiNewRouteImport } from './routes/sushi/new'
import { Route as SushiGroupIndexRouteImport } from './routes/sushi/group/index'
import { Route as SushiGroupRoomIdroomIdIndexRouteImport } from './routes/sushi/group/$roomId/(roomId)/index'
import { Route as SushiGroupRoomIdshareShareRouteImport } from './routes/sushi/group/$roomId/(share)/share'
import { Route as SushiGroupRoomIdresultResultRouteImport } from './routes/sushi/group/$roomId/(result)/result'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SushiIndexRoute = SushiIndexRouteImport.update({
  id: '/sushi/',
  path: '/sushi/',
  getParentRoute: () => rootRouteImport,
} as any)
const SushiNewRoute = SushiNewRouteImport.update({
  id: '/sushi/new',
  path: '/sushi/new',
  getParentRoute: () => rootRouteImport,
} as any)
const SushiGroupIndexRoute = SushiGroupIndexRouteImport.update({
  id: '/sushi/group/',
  path: '/sushi/group/',
  getParentRoute: () => rootRouteImport,
} as any)
const SushiGroupRoomIdroomIdIndexRoute =
  SushiGroupRoomIdroomIdIndexRouteImport.update({
    id: '/sushi/group/$roomId/(roomId)/',
    path: '/sushi/group/$roomId/',
    getParentRoute: () => rootRouteImport,
  } as any)
const SushiGroupRoomIdshareShareRoute =
  SushiGroupRoomIdshareShareRouteImport.update({
    id: '/sushi/group/$roomId/(share)/share',
    path: '/sushi/group/$roomId/share',
    getParentRoute: () => rootRouteImport,
  } as any)
const SushiGroupRoomIdresultResultRoute =
  SushiGroupRoomIdresultResultRouteImport.update({
    id: '/sushi/group/$roomId/(result)/result',
    path: '/sushi/group/$roomId/result',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/sushi/new': typeof SushiNewRoute
  '/sushi': typeof SushiIndexRoute
  '/sushi/group': typeof SushiGroupIndexRoute
  '/sushi/group/$roomId/result': typeof SushiGroupRoomIdresultResultRoute
  '/sushi/group/$roomId/share': typeof SushiGroupRoomIdshareShareRoute
  '/sushi/group/$roomId': typeof SushiGroupRoomIdroomIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/sushi/new': typeof SushiNewRoute
  '/sushi': typeof SushiIndexRoute
  '/sushi/group': typeof SushiGroupIndexRoute
  '/sushi/group/$roomId/result': typeof SushiGroupRoomIdresultResultRoute
  '/sushi/group/$roomId/share': typeof SushiGroupRoomIdshareShareRoute
  '/sushi/group/$roomId': typeof SushiGroupRoomIdroomIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/sushi/new': typeof SushiNewRoute
  '/sushi/': typeof SushiIndexRoute
  '/sushi/group/': typeof SushiGroupIndexRoute
  '/sushi/group/$roomId/(result)/result': typeof SushiGroupRoomIdresultResultRoute
  '/sushi/group/$roomId/(share)/share': typeof SushiGroupRoomIdshareShareRoute
  '/sushi/group/$roomId/(roomId)/': typeof SushiGroupRoomIdroomIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/sushi/new'
    | '/sushi'
    | '/sushi/group'
    | '/sushi/group/$roomId/result'
    | '/sushi/group/$roomId/share'
    | '/sushi/group/$roomId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/sushi/new'
    | '/sushi'
    | '/sushi/group'
    | '/sushi/group/$roomId/result'
    | '/sushi/group/$roomId/share'
    | '/sushi/group/$roomId'
  id:
    | '__root__'
    | '/'
    | '/sushi/new'
    | '/sushi/'
    | '/sushi/group/'
    | '/sushi/group/$roomId/(result)/result'
    | '/sushi/group/$roomId/(share)/share'
    | '/sushi/group/$roomId/(roomId)/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SushiNewRoute: typeof SushiNewRoute
  SushiIndexRoute: typeof SushiIndexRoute
  SushiGroupIndexRoute: typeof SushiGroupIndexRoute
  SushiGroupRoomIdresultResultRoute: typeof SushiGroupRoomIdresultResultRoute
  SushiGroupRoomIdshareShareRoute: typeof SushiGroupRoomIdshareShareRoute
  SushiGroupRoomIdroomIdIndexRoute: typeof SushiGroupRoomIdroomIdIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sushi/new': {
      id: '/sushi/new'
      path: '/sushi/new'
      fullPath: '/sushi/new'
      preLoaderRoute: typeof SushiNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sushi/': {
      id: '/sushi/'
      path: '/sushi'
      fullPath: '/sushi'
      preLoaderRoute: typeof SushiIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sushi/group/': {
      id: '/sushi/group/'
      path: '/sushi/group'
      fullPath: '/sushi/group'
      preLoaderRoute: typeof SushiGroupIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sushi/group/$roomId/(result)/result': {
      id: '/sushi/group/$roomId/(result)/result'
      path: '/sushi/group/$roomId/result'
      fullPath: '/sushi/group/$roomId/result'
      preLoaderRoute: typeof SushiGroupRoomIdresultResultRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sushi/group/$roomId/(share)/share': {
      id: '/sushi/group/$roomId/(share)/share'
      path: '/sushi/group/$roomId/share'
      fullPath: '/sushi/group/$roomId/share'
      preLoaderRoute: typeof SushiGroupRoomIdshareShareRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sushi/group/$roomId/(roomId)/': {
      id: '/sushi/group/$roomId/(roomId)/'
      path: '/sushi/group/$roomId'
      fullPath: '/sushi/group/$roomId'
      preLoaderRoute: typeof SushiGroupRoomIdroomIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

declare module './routes/index' {
  const createFileRoute: CreateFileRoute<
    '/',
    FileRoutesByPath['/']['parentRoute'],
    FileRoutesByPath['/']['id'],
    FileRoutesByPath['/']['path'],
    FileRoutesByPath['/']['fullPath']
  >
}
declare module './routes/sushi/new' {
  const createFileRoute: CreateFileRoute<
    '/sushi/new',
    FileRoutesByPath['/sushi/new']['parentRoute'],
    FileRoutesByPath['/sushi/new']['id'],
    FileRoutesByPath['/sushi/new']['path'],
    FileRoutesByPath['/sushi/new']['fullPath']
  >
}
declare module './routes/sushi/index' {
  const createFileRoute: CreateFileRoute<
    '/sushi/',
    FileRoutesByPath['/sushi/']['parentRoute'],
    FileRoutesByPath['/sushi/']['id'],
    FileRoutesByPath['/sushi/']['path'],
    FileRoutesByPath['/sushi/']['fullPath']
  >
}
declare module './routes/sushi/group/index' {
  const createFileRoute: CreateFileRoute<
    '/sushi/group/',
    FileRoutesByPath['/sushi/group/']['parentRoute'],
    FileRoutesByPath['/sushi/group/']['id'],
    FileRoutesByPath['/sushi/group/']['path'],
    FileRoutesByPath['/sushi/group/']['fullPath']
  >
}
declare module './routes/sushi/group/$roomId/(result)/result' {
  const createFileRoute: CreateFileRoute<
    '/sushi/group/$roomId/(result)/result',
    FileRoutesByPath['/sushi/group/$roomId/(result)/result']['parentRoute'],
    FileRoutesByPath['/sushi/group/$roomId/(result)/result']['id'],
    FileRoutesByPath['/sushi/group/$roomId/(result)/result']['path'],
    FileRoutesByPath['/sushi/group/$roomId/(result)/result']['fullPath']
  >
}
declare module './routes/sushi/group/$roomId/(share)/share' {
  const createFileRoute: CreateFileRoute<
    '/sushi/group/$roomId/(share)/share',
    FileRoutesByPath['/sushi/group/$roomId/(share)/share']['parentRoute'],
    FileRoutesByPath['/sushi/group/$roomId/(share)/share']['id'],
    FileRoutesByPath['/sushi/group/$roomId/(share)/share']['path'],
    FileRoutesByPath['/sushi/group/$roomId/(share)/share']['fullPath']
  >
}
declare module './routes/sushi/group/$roomId/(roomId)/index' {
  const createFileRoute: CreateFileRoute<
    '/sushi/group/$roomId/(roomId)/',
    FileRoutesByPath['/sushi/group/$roomId/(roomId)/']['parentRoute'],
    FileRoutesByPath['/sushi/group/$roomId/(roomId)/']['id'],
    FileRoutesByPath['/sushi/group/$roomId/(roomId)/']['path'],
    FileRoutesByPath['/sushi/group/$roomId/(roomId)/']['fullPath']
  >
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SushiNewRoute: SushiNewRoute,
  SushiIndexRoute: SushiIndexRoute,
  SushiGroupIndexRoute: SushiGroupIndexRoute,
  SushiGroupRoomIdresultResultRoute: SushiGroupRoomIdresultResultRoute,
  SushiGroupRoomIdshareShareRoute: SushiGroupRoomIdshareShareRoute,
  SushiGroupRoomIdroomIdIndexRoute: SushiGroupRoomIdroomIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
