import { parseAst, generateFromAst, logDiff } from "@tanstack/router-utils";
import babel from "@babel/core";
import * as template from "@babel/template";
import { getConfig } from "./config.js";
import { fileIsInRoutesDirectory, debug } from "./utils.js";
const unpluginRouteAutoImportFactory = (options = {}) => {
  let ROOT = process.cwd();
  let userConfig = options;
  return {
    name: "router-autoimport-plugin",
    enforce: "pre",
    transform(code, id) {
      let routeType;
      if (code.includes("export const Route = createFileRoute(")) {
        routeType = "createFileRoute";
      } else if (code.includes("export const Route = createLazyFileRoute(")) {
        routeType = "createLazyFileRoute";
      } else {
        return null;
      }
      const routerImportPath = `@tanstack/${userConfig.target}-router`;
      const ast = parseAst({ code });
      let isCreateRouteFunctionImported = false;
      babel.traverse(ast, {
        Program: {
          enter(programPath) {
            programPath.traverse({
              ImportDeclaration(path) {
                const importedSpecifiers = path.node.specifiers.map(
                  (specifier) => specifier.local.name
                );
                if (importedSpecifiers.includes(routeType) && path.node.source.value === routerImportPath) {
                  isCreateRouteFunctionImported = true;
                }
              }
            });
          }
        }
      });
      if (!isCreateRouteFunctionImported) {
        if (debug) console.info("Adding autoimports to route ", id);
        const autoImportStatement = template.statement(
          `import { ${routeType} } from '${routerImportPath}'`
        )();
        ast.program.body.unshift(autoImportStatement);
        const result = generateFromAst(ast, {
          sourceMaps: true,
          filename: id,
          sourceFileName: id
        });
        if (debug) {
          logDiff(code, result.code);
          console.log("Output:\n", result.code + "\n\n");
        }
        return result;
      }
      return null;
    },
    transformInclude(id) {
      return fileIsInRoutesDirectory(id, userConfig.routesDirectory);
    },
    vite: {
      configResolved(config) {
        ROOT = config.root;
        userConfig = getConfig(options, ROOT);
      }
    },
    rspack() {
      ROOT = process.cwd();
      userConfig = getConfig(options, ROOT);
    },
    webpack() {
      ROOT = process.cwd();
      userConfig = getConfig(options, ROOT);
    }
  };
};
export {
  unpluginRouteAutoImportFactory
};
//# sourceMappingURL=route-autoimport-plugin.js.map
